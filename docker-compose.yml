version: '3.3'

services:

  prometheus:
    image: prom/prometheus
    container_name: prometheus  
    restart: unless-stopped
    ports:
      - 9090:9090
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      # - ./prometheus:/prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --storage.tsdb.retention.time=90d # 90일보다 오래된 metrics는 삭제
      - --storage.tsdb.retention.size=10GB # 10GB를 넘을 시 오래된 metrics 삭제
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.console.templates=/usr/share/proemtheus/consoles
      - --web.enable-admin-api
    networks:
      - app-tier

  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    ports:
      - 3000:3000
    volumes:
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin # grafana 사용자 이름
      - GF_SECURITY_ADMIN_PASSWORD=admin # grafana 사용자 비밀번호
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - app-tier

  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    container_name: cadvisor
    restart: unless-stopped
    ports:
      - "8081:8080"
    volumes:
      - "/:/rootfs:ro"
      - "/var/run:/var/run:rw"
      - "/sys:/sys:ro"
      - "/var/lib/docker/:/var/lib/docker:ro"
    networks:
      - app-tier


  # alertmanager:
  #   image: prom/alertmanager
  #   container_name: alertmanager
  #   restart: unless-stopped
  #   ports:
  #     - "9093:9093"
  #   volumes:
  #     - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml
  #   command:
  #     - '--config.file=/etc/alertmanager/alertmanager.yml'
  #     - '--storage.path=/alertmanager'
  #   networks:
  #     - app-tier

  nginx:
    build:
      context: ./nginx
    ports:
      - "80:80"  # NGINX가 80 포트에서 호스트의 80 포트로 연결됩니다.
    volumes:
      - ./backend/static:/static
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro  # 사용자 정의 NGINX 설정 파일을 마운트
      - ./html:/usr/share/nginx/html:ro  # 필요한 경우 정적 파일들을 마운트
    depends_on:
      - react
      - django
    networks:
      - app-tier

  rabbitmq:
    image: "rabbitmq:3-management"
    container_name: rabbitmq
    env_file:
      - .env
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app-tier

  celery:
    build: ./backend
    container_name: celery_worker
    command: celery -A myproject worker --loglevel=info
    env_file:
      - .env 
    depends_on:
      - rabbitmq
      - mysqldb
    volumes:
      - ./backend:/backend
    networks:
      - app-tier
  
  react:
    build:
      context: ./frontend
    container_name: react
    stdin_open: true
    command: sh -c "yarn dev --host"
    ports:
      - 5173:5173
    volumes:
      - ./frontend:/app/frontend
    networks:
      - app-tier

  mysqldb:
    image: mysql:latest
    container_name: mysqldb
    restart: always
    env_file:
      - .env
    ports:
      - '3306:3306'
    volumes:
      - sql-db:/var/lib/mysql
    healthcheck:
      test:
        ['CMD', 'mysqladmin', 'ping', '-h', 'localhost', '-uadmin', '-proot']
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - app-tier

  # phpmyadmin:
  #   image: phpmyadmin
  #   restart: always
  #   links:
  #     - mysqldb
  #   ports:
  #     - 8080:80
  #   environment:
  #     PMA_ARBITRARY: 1
  #     PMA_HOST: mysqldb
  #     PMA_PORT: 3306
  #   networks:
  #     - app-tier

  django:
    build:
      context: ./backend
    container_name: django
    command: >
      sh -c "python manage.py migrate &&
               python manage.py collectstatic --noinput &&
               gunicorn myproject.wsgi:application --bind 0.0.0.0:8001 --timeout 150"
    stdin_open: true
    ports:
      - 8001:8001
    volumes:
      - ./backend/:/backend/
      - sql-db:/var/lib/mysql
      - ./backend/static/:/backend/static/
    depends_on:
      - mysqldb
    networks:
      - app-tier
    restart: always
    env_file:
      - .env
    expose:
      - 8001
      
volumes:
  rabbitmq_data:
  sql-db:
  grafana-data:

networks:
  app-tier:
    driver: bridge
